{"name":"Pubsubchannel","tagline":"Hosted Multi-tenant Web and Native Publish-Subscribe Event Channel for Google App Engine","body":"pubsubchannel\r\n=============\r\n\r\nA Hosted Multi-tenant Web and Native Publish-Subscribe Event Channel for Google App Engine.\r\nThe Event Channel utilizes the App Engine services Memcache (CAS), and Namespaces.\r\nTask Queues and Channels were used in early versions but dropped because they\r\nrequire more quota, and have no garbage collection control respectively.\r\n\r\nJavascript Frontend\r\n-------\r\n\r\nAdd:\r\n```html\r\n\t<script type=\"text/javascript\" src=\"http://pubsubchannel.appspot.com/\"></script>\r\n```\r\n\r\nwhere pubsubchannel is the app id of your Google App Engine application where the \r\nchannel is deployed.\r\n\r\nTo send messages call:\r\n\r\n\tPubSub.publish(\"demo\",{'msg':\"Hello world from \" + PubSub.id()});\r\n\r\nTo receive messages call:\r\n\r\n\tPubSub.subscribe(\"demo\",function (json) {console.log(json.msg)});\r\n\r\nGoogle App Engine Backend\r\n-------\r\n\r\nIn the app.yaml file change the APP_ID to your google app engine application id.\r\nIn the pubsub.js file change APP_ID to your google app engine application id.\r\n\r\nA live demo deployment is avalable at pubsubchannel.appspot.com \r\n\r\nNative Python Client\r\n-------\r\nFor non-browser clients there is a long-polling REST interface based on App Engine Task Queues.\r\nThe only thing the client needs to do is to call the pull REST API as exemplified by the\r\npython client in the distribution. The example python client depends on the requests\r\nand threading packages, but any http client library may be used.\r\n\r\nTo listen to events on the demo channel use the following code  \r\n\r\n\timport pubsubchannel\r\n\timport json\r\n\tdef callback(data):\r\n\t  print json.dumps(data)\r\n\tchannel = pubsubchannel()\r\n\tchannel.subscribe(\"demo\")\r\n\tchannel.listen(callback=callback)\r\n\r\nThe callback will be called in a separate thread. To stop listening to events call\r\n\r\n\tchannel.stop()\r\n\r\nSubscribe may be called any number of times but listen should only be called once per client.\r\nTo send events call\r\n\r\n\tchannel.publish(\"demo\",message)\r\n\r\nwhere message must be a json serializable object.\r\nNote, the App Engine TaskQueue API is used internally but it is not exposed in the REST API\r\nused by the python client, hence the app engine auth rules do not apply.\r\nThe python client depends on the requests package which can be installed with\r\n\r\n\tpip install requests\r\n\r\nCurl REST Demo clients\r\n-------\r\nTwo scripts are included to demonstrate the REST API using Curl.\r\n\r\n\tclients/subscribe channel\r\n\r\nwhere channel is the channel you want to subscribe to.\r\n\r\n\tclients/publish channel json\r\n\r\nwhere json is a json encoded string.\r\n\r\nExamples\r\n-------\r\n\r\n[Hello World] (http://htmlpreview.github.io/?https://github.com/patompa/pubsubchannel/blob/master/examples/helloworld.html)\r\n\r\n[Group Canvas] (http://htmlpreview.github.io/?https://github.com/patompa/pubsubchannel/blob/master/examples/groupcanvas.html?group=demo)\r\n\r\n\r\n\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}